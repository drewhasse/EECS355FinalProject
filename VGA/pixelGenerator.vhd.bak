library IEEE;

use IEEE.std_logic_1164.all;
use IEEE.std_logic_arith.all;
use IEEE.std_logic_unsigned.all;

entity pixelGenerator is
	port(
			clk, ROM_clk, rst_n, video_on, eof 				: in std_logic;
			pixel_row, pixel_column						    : in std_logic_vector(9 downto 0);
			red_out, green_out, blue_out					: out std_logic_vector(9 downto 0)
		);
end entity pixelGenerator;

architecture behavioral of pixelGenerator is

constant color_red 	 	 : std_logic_vector(2 downto 0) := "000";
constant color_green	 : std_logic_vector(2 downto 0) := "001";
constant color_blue 	 : std_logic_vector(2 downto 0) := "010";
constant color_yellow 	 : std_logic_vector(2 downto 0) := "011";
constant color_magenta 	 : std_logic_vector(2 downto 0) := "100";
constant color_cyan 	 : std_logic_vector(2 downto 0) := "101";
constant color_black 	 : std_logic_vector(2 downto 0) := "110";
constant color_white	 : std_logic_vector(2 downto 0) := "111";
	
component colorROM is
	port
	(
		address		: in std_logic_vector (2 downto 0);
		clock		: in std_logic  := '1';
		q			: out std_logic_vector (29 downto 0)
	);
end component colorROM;

signal colorAddress : std_logic_vector (2 downto 0);
signal color        : std_logic_vector (29 downto 0);

begin

	red_out <= color(29 downto 20);
	green_out <= color(19 downto 10);
	blue_out <= color(9 downto 0);

------------------------------------------------------------------------------------------	
	colors : colorROM
		port map(colorAddress, ROM_clk, color);

--------------------------------------------------------------------------------------------	
	-- pixelUpdate : process(eof) is

	-- begin

		-- if (rising_edge(eof)) then
			
			-- if (tankOffScreen(tankTop)) then
				-- newBullet(bulTop, tankTop);
				-- tankTop.speed <= 0 - tankTop.speed;
			-- elsif (hold = '0') then
					-- tankTop.PosX <= tankTop.PosX + tankTop.speed;
			-- end if;
			
			-- if (tankOffScreen(tankBottom)) then	
				-- newBullet(bulBottom, tankBottom);
				-- tankBottom.speed <= 0 - tankBottom.speed;
			-- elsif (hold = '0') then
				-- tankBottom.posX <= tankBottom.PosX + tankBottom.speed;
			-- end if;

			-- if (bulletOffScreen(bulTop)) then
				-- tankTop.bulFired <= false;
				-- bulTop.visible <= false;
			-- elsif (tankHit(bulTop, tankBottom)) then
			    -- tankTop.bulFired <= false;
				-- tankTop.score <= tankTop.score + 1;
				-- bulTop.visible <= false;
			-- elsif (hold = '0') then
				-- bulTop.PosY <= bulTop.PosY + bulTop.speed;
			-- end if;	
			
			-- if (bulletOffScreen(bulBottom)) then
				-- tankBottom.bulFired <= false;
				-- bulBottom.visible <= false;
			-- elsif (tankHit(bulBottom, tankTop)) then
			    -- tankBottom.bulFired <= false;
				-- tankBottom.score <= tankBottom.score + 1;
				-- bulBottom.visible <= false;
			-- elsif (hold = '0') then
				-- bulBottom.PosY <= bulBottom.PosY + bulBottom.speed;
			-- end if;
					
		-- end if;	
	
	-- end process pixelUpdate;

------------------------------------------------------------------------------------------	
	pixelDraw : process(clk, rst_n) is
	
	begin
			
		if (rising_edge(clk)) then
			
			-- if (inTank(tankTop, pixel_row, pixel_column)) then
				-- colorAddress <= color_red;
			-- elsif (inTank(tankBottom, pixel_row, pixel_column)) then	
				-- colorAddress <= color_blue;
			-- elsif (inBullet(bulTop, pixel_row, pixel_column) and bulTop.visible = true) then
				-- colorAddress <= color_black;
			-- elsif (inBullet(bulBottom, pixel_row, pixel_column) and bulBottom.visible = true) then
				-- colorAddress <= color_black;
			-- else	
				-- colorAddress <= color_white;
			-- end if;
		
			if (pixel_row > 320 and pixel_column < 240) then
				colorAddress <= color_green;
			elsif (pixel_row >= 320 and pixel_column < 240) then
				colorAddress <= color_yellow;
			elsif (pixel_row > 320 and pixel_column =< 240) then
				colorAddress <= color_red;
			elsif (pixel_row >= 320 and pixel_column =< 240) then
				colorAddress <= color_blue;
			else
				colorAddress <= color_white;
		end if;
		
	end process pixelDraw;	
		
end architecture behavioral;		